version: "3.7"

services:
  traefik:
    image: traefik:latest
    container_name: traefik
    hostname: traefik
    restart: always
    command:
      # Tell Traefik to discover containers using the Docker API
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      # Enable the Trafik dashboard
      - --api.dashboard=true
      - --api.insecure=true
     # Set up LetsEncrypt
      #- --certificatesresolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=ovh
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.letsencrypt.acme.email=noreply@drupal.community
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      # Set up an insecure listener that redirects all traffic to TLS
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.websecure.address=:443
      # Set up the TLS configuration for our websecure listener
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.certResolver=letsencrypt
      - --entrypoints.websecure.http.tls.domains[0].main=drupal.community
      - --entrypoints.websecure.http.tls.domains[0].sans=*.drupal.community
      - --accesslog=true
    environment:
      - OVH_ENDPOINT=${OVH_ENDPOINT}
      - OVH_APPLICATION_KEY=${OVH_APPLICATION_KEY}
      - OVH_APPLICATION_SECRET=${OVH_APPLICATION_SECRET}
      - OVH_CONSUMER_KEY=${OVH_CONSUMER_KEY}
    ports:
      - '80:80'
      - '8080:8080'
      - '443:443'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs:/letsencrypt
    labels:
      - "traefik.enable=true"
    networks:
      - external_network
      - internal_network

  db:
    restart: always
    image: postgres:14-alpine
    shm_size: 512mb
    container_name: db
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
    env_file: db.env
    environment:
      - 'POSTGRES_HOST_AUTH_METHOD=trust'
    volumes:
      - ./postgres:/var/lib/postgresql/data
    networks:
      - internal_network
    command: |
        postgres
          -c shared_preload_libraries=pg_stat_statements
          -c pg_stat_statements.track=all
          -c max_connections=200
          -c work_mem=16MB          
  redis:
    restart: always
    image: redis:7-alpine
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
    volumes:
      - ./redis:/data
    networks:
      - internal_network

  # es:
  #   restart: always
  #   container_name: es
  #   image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2
  #   environment:
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #     - "cluster.name=es-mastodon"
  #     - "discovery.type=single-node"
  #     - "bootstrap.memory_lock=true"
  #   networks:
  #     - external_network
  #     - internal_network
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
  #     interval: 15s
  #     retries: 12
  #   volumes:
  #     - /etc/localtime:/etc/localtime:ro
  #     - /etc/timezone:/etc/timezone:ro
  #     - ./data:/usr/share/elasticsearch/data:rw
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "10m"

  web:
    image: ghcr.io/mastodon/mastodon:v4.3.2
    restart: always
    env_file:
      - .env.production
      - db.env
    command: bundle exec puma -C config/puma.rb
    healthcheck:
      test: ['CMD-SHELL',"curl -s --noproxy localhost localhost:3000/health | grep -q 'OK' || exit 1"]
    depends_on:
      - db
      - redis
      - traefik
    labels:
      - traefik.enable=true
      - traefik.http.routers.mastodonweb.rule=(Host(`drupal.community`) && !PathPrefix(`/api/udp/routers`) && !PathPrefix(`/api/overview`))
      - traefik.http.routers.mastodonweb.entrypoints=websecure
      - traefik.http.routers.mastodonweb.tls.certresolver=letsencrypt
      - traefik.http.services.mastodonweb.loadbalancer.server.port=3000
    volumes:
      - ./public/system:/mastodon/public/system
    networks:
      - external_network
      - internal_network

  streaming:
    image: ghcr.io/mastodon/mastodon-streaming:v4.3.2
    restart: always
    env_file:
      - .env.production
      - db.env
    command: node ./streaming/index.js
    healthcheck:
      test: ['CMD-SHELL', "curl -s --noproxy localhost localhost:4000/api/v1/streaming/health | grep -q 'OK' || exit 1"]
    expose:
      - "4000"
    depends_on:
      - db
      - redis
      - traefik
    labels:
      - traefik.enable=true
      - traefik.http.routers.mastodonstreaming.rule=(Host(`drupal.community`) && PathPrefix(`/api/v1/streaming`))
      - traefik.http.routers.mastodonstreaming.entrypoints=websecure
      - traefik.http.routers.mastodonstreaming.tls.certresolver=letsencrypt
      - traefik.http.services.mastodonstreaming.loadbalancer.server.port=4000
    networks:
      - external_network
      - internal_network

  sidekiq:
    image: ghcr.io/mastodon/mastodon:v4.3.2
    restart: always
    env_file:
      - .env.production
      - db.env
    command: bundle exec sidekiq
    healthcheck:
      test: ['CMD-SHELL', "ps aux | grep '[s]idekiq\ 6' || false"]
    depends_on:
      - db
      - redis
      - traefik
    volumes:
      - ./public/system:/mastodon/public/system
    networks:
      - external_network
      - internal_network

networks:
  external_network:
    name: mastodon_external_network
  internal_network:
    internal: true
